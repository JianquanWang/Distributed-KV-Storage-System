syntax="proto3";

package raft;
option java_package = "com.raftimpl.raft.proto";
option java_outer_classname = "RaftProto";

enum ResCode {
    RES_CODE_SUCCESS = 0;
    RES_CODE_FAIL = 1;
    RES_CODE_NOT_LEADER = 2;
}

enum EntryType {
    ENTRY_TYPE_DATA = 0;
    ENTRY_TYPE_CONFIGURATION= 1;
}

message Endpoint {
    string host = 1;
    uint32 port = 2;
}

message Server {
    uint32 server_id = 1;
    Endpoint endpoint = 2;
}

message Configuration {
    repeated Server servers = 1;
}

message LogMetaData {
    uint64 current_term = 1;
    uint32 voted_for = 2;
    uint64 first_log_index = 3;
    uint64 commit_index = 4;
}

message SnapshotMetaData {
    uint64 last_included_index = 1;
    uint64 last_included_term = 2;
    Configuration configuration = 3;
}

message LogEntry {
    uint64 term = 1;
    uint64 index = 2;
    EntryType type = 3;
    bytes data = 4;
}

message VoteRequest {
    uint32 server_id = 1; // candidate Id
    uint64 term = 2; // candidate's term
    uint64 last_log_term = 3; // candidate's last log term
    uint64 last_log_index = 4; // candidate's last log index
}

message VoteResponse {
    uint64 term = 1; // current term
    bool granted = 2; // true if the candidate win this vote 
}

message AppendEntriesRequest {
    uint32 server_id = 1; // Leader's Id
    uint64 term = 2; // Leader's term
    uint64 prev_log_index = 3; // the new log index follows prev index
    uint64 prev_log_term = 4; 
    uint64 commit_index = 5; // leader committed log's index
    repeated LogEntry entries = 6; // log entry for storage (empty if heartbeat)
}

message AppendEntriesResponse {
    ResCode res_code = 1; // true if follower has the log which matches prevLogIndex and prevLogTerm
    uint64 term = 2; // current termï¼Œ for leader to update itself
    uint64 last_log_index = 3;
}

message InstallSnapshotRequest {
    uint32 server_id = 1;
    uint64 term = 2;
    SnapshotMetaData snapshot_meta_data = 3;
    string file_name = 4;
    uint64 offset = 5;
    bytes data = 6;
    bool is_first = 7;
    bool is_last = 8;
}

message InstallSnapshotResponse {
    ResCode res_code = 1;
    uint64 term = 2;
}

message GetLeaderRequest {
}

message GetLeaderResponse {
    ResCode res_code = 1;
    string res_msg = 2;
    Endpoint leader = 3;
}

message AddPeersRequest {
    repeated Server servers = 1;
}

message AddPeersResponse {
    ResCode res_code = 1;
    string res_msg = 2;
}

message RemovePeersRequest {
    repeated Server servers = 1;
}

message RemovePeersResponse {
    ResCode res_code = 1;
    string res_msg = 2;
}

message GetConfigurationRequest {
}

message GetConfigurationResponse {
    ResCode res_code = 1;
    string res_msg = 2;
    Server leader = 3;
    repeated Server servers = 4;
}

message GetLeaderCommitIndexRequest {
}

message GetLeaderCommitIndexResponse {
  uint64 commit_index = 1;
}